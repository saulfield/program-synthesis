from pydantic.dataclasses import dataclass


@dataclass(frozen=True)
class Spec:
    name: str
    truth_table: list[tuple[list[int], list[int]]]


SPECS = [
    Spec(
        "NOT",
        [
            ([0], [1]),
            ([1], [0]),
        ],
    ),
    Spec(
        "AND",
        [
            ([0, 0], [0]),
            ([0, 1], [0]),
            ([1, 0], [0]),
            ([1, 1], [1]),
        ],
    ),
    Spec(
        "OR",
        [
            ([0, 0], [0]),
            ([0, 1], [1]),
            ([1, 0], [1]),
            ([1, 1], [1]),
        ],
    ),
    Spec(
        "XOR",
        [
            ([0, 0], [0]),
            ([0, 1], [1]),
            ([1, 0], [1]),
            ([1, 1], [0]),
        ],
    ),
    Spec(
        "HalfAdder",
        [
            ([0, 0], [0, 0]),
            ([0, 1], [0, 1]),
            ([1, 0], [0, 1]),
            ([1, 1], [1, 0]),
        ],
    ),
    Spec(
        "FullAdder",
        [
            ([0, 0, 0], [0, 0]),  # [0, 0]
            ([0, 0, 1], [0, 1]),  # [0, 1]
            ([0, 1, 0], [0, 1]),  # [0, 1]
            ([0, 1, 1], [1, 0]),  # [1, 0]
            ([1, 0, 0], [0, 1]),  # [0, 1]
            ([1, 0, 1], [1, 0]),  # [1, 0]
            ([1, 1, 0], [1, 0]),  # [1, 0]
            ([1, 1, 1], [1, 1]),  # [1, 1]
        ],
    ),
    Spec(
        "MultiBitAdder",
        [
            ([0, 0, 0, 0, 0], [0, 0, 0]),
            ([0, 0, 0, 0, 1], [0, 0, 1]),
            ([0, 0, 0, 1, 0], [0, 0, 1]),
            ([0, 0, 0, 1, 1], [0, 1, 0]),
            ([0, 0, 1, 0, 0], [0, 1, 0]),
            ([0, 0, 1, 0, 1], [0, 1, 1]),
            ([0, 0, 1, 1, 0], [0, 1, 1]),
            ([0, 0, 1, 1, 1], [1, 0, 0]),
            ([0, 1, 0, 0, 0], [0, 0, 1]),
            ([0, 1, 0, 0, 1], [0, 1, 0]),
            ([0, 1, 0, 1, 0], [0, 1, 0]),
            ([0, 1, 0, 1, 1], [0, 1, 1]),
            ([0, 1, 1, 0, 0], [0, 1, 1]),
            ([0, 1, 1, 0, 1], [1, 0, 0]),
            ([0, 1, 1, 1, 0], [1, 0, 0]),
            ([0, 1, 1, 1, 1], [1, 0, 1]),
            ([1, 0, 0, 0, 0], [0, 1, 0]),
            ([1, 0, 0, 0, 1], [0, 1, 1]),
            ([1, 0, 0, 1, 0], [0, 1, 1]),
            ([1, 0, 0, 1, 1], [1, 0, 0]),
            ([1, 0, 1, 0, 0], [1, 0, 0]),
            ([1, 0, 1, 0, 1], [1, 0, 1]),
            ([1, 0, 1, 1, 0], [1, 0, 1]),
            ([1, 0, 1, 1, 1], [1, 1, 0]),
            ([1, 1, 0, 0, 0], [0, 1, 1]),
            ([1, 1, 0, 0, 1], [1, 0, 0]),
            ([1, 1, 0, 1, 0], [1, 0, 0]),
            ([1, 1, 0, 1, 1], [1, 0, 1]),
            ([1, 1, 1, 0, 0], [1, 0, 1]),
            ([1, 1, 1, 0, 1], [1, 1, 0]),
            ([1, 1, 1, 1, 0], [1, 1, 0]),
            ([1, 1, 1, 1, 1], [1, 1, 1]),
        ],
    ),
]
